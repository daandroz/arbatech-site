{"version":3,"file":"static/js/548.2e7eec38.chunk.js","mappings":"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","sources":["components/AboutUs/AboutUs.js","components/utils/api.js"],"sourcesContent":["import './AboutUs.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { fetchChatGptResponse } from '../utils/api'; \n\nconst AboutUs = () => {\n  const [messages, setMessages] = useState([\n    { text: \"¡Bienvenido, soy tu asistente Lancaster! ¿En qué te pudiera ayudar? pregúntame lo que quieras.\", sender: 'ai' },\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const chatEndRef = useRef(null);\n  const isFirstRender = useRef(true); // Evita el scroll en la carga inicial\n\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      const newMessages = [\n        ...messages,\n        { text: inputValue, sender: 'user' },\n      ];\n      setMessages(newMessages);\n      setInputValue('');\n\n      try {\n        const aiResponse = await fetchChatGptResponse(inputValue);\n        const updatedMessages = [\n          ...newMessages,\n          { text: aiResponse, sender: 'ai' },\n        ];\n        setMessages(updatedMessages);\n      } catch (error) {\n        const errorMessage = 'Hubo un error al obtener la respuesta';\n        const updatedMessagesWithError = [\n          ...newMessages,\n          { text: errorMessage, sender: 'ai' },\n        ];\n        setMessages(updatedMessagesWithError);\n      }\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    \n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }, [messages]);\n\n  return (\n    <section className=\"aboutus container\" id=\"about-us\">\n      <div className=\"background-desktop-about-us\">\n        <div className=\"overlay-wrap-about-us\">\n          <div className=\"overlay-top-about-us\"></div>\n          <div className=\"overlay-bottom-about-us\"></div>\n          <div className=\"overlay-right-about-us\"></div>\n        </div>\n      </div>\n      <div className=\"aboutus\">\n        <div className=\"about-us-info\">\n          <p className=\"headline\">\n            <img src={`${process.env.PUBLIC_URL}/img/Sphere-aboutUs.svg`} alt=\"sphere\" width={20} />\n            Se siente real porque lo es.\n          </p>\n          <h2 className=\"about-us-header\">\n            Lo más parecido a un agente estrella de <span>servicio al cliente.</span>\n          </h2>\n          <p className=\"about-us-paragraph\">\n            +Empatía humana en cada interacción. <br />\n            +Resuelve problemas en lugar de desviarlos. <br />\n            +Gestión omnicanal sin complicaciones.\n          </p>\n          <div className=\"about-us-link\">\n            <a\n              href=\"/\"\n              className=\"about-us-button\"\n              onClick={(e) => {\n                let element = document.getElementById('traits');\n                e.preventDefault();\n                element &&\n                  element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n              }}\n            >\n              Nuestros Servicios\n            </a>\n          </div>\n        </div>\n\n        <div className=\"chatbot-container chatbot-visible\">\n          <div className=\"chatbot-header\">\n            <img src={`${process.env.PUBLIC_URL}/img/Sphere-aboutUs.svg`} alt=\"sphere\" width={20} />\n            Lancaster\n          </div>\n          <div className=\"chatbot-main\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`chat-message-container ${message.sender}`}\n              >\n                {message.sender === 'ai' && (\n                  <div className=\"chat-avatar ai\">\n                    <img src={`${process.env.PUBLIC_URL}/img/Sphere-aboutUs.svg`} alt=\"AI avatar\" />\n                  </div>\n                )}\n                <div className={`chat-message ${message.sender === 'user' ? 'user' : 'ai'}`}>\n                  {message.text}\n                </div>\n                {message.sender === 'user' && (\n                  <div className=\"chat-avatar user\">\n                    <img src={`${process.env.PUBLIC_URL}/img/chat-avatar-user.svg`} alt=\"User avatar\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={chatEndRef}></div> {/* Punto de referencia para el scroll */}\n          </div>\n          <div className=\"chatbot-footer\">\n            <input\n              type=\"text\"\n              className=\"chatbot-input\"\n              placeholder=\"Escribe tu mensaje aquí...\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyDown={handleKeyDown}\n            />\n            <button className=\"chatbot-send\" onClick={handleSendMessage}>\n              {'>'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default AboutUs;","// src/components/util/api.js\nconst API_URL = 'http://localhost:5002/chat'; // URL de tu servidor Express\n\nexport const fetchChatGptResponse = async (message, interactionCount) => {\n  try {\n    // Si ya se alcanzó el máximo de interacciones, se devuelve un mensaje de alerta.\n    if (interactionCount >= 10) {\n      return \"¡Muchas gracias por probar Arbatech IA! Has utilizado el máximo de interacciones.\";\n    }\n\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message, interactionCount })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.content; // Devuelve la respuesta del modelo\n  } catch (error) {\n    console.error('Error al obtener la respuesta de OpenAI:', error);\n    throw error;\n  }\n};\n"],"names":["AboutUs","messages","setMessages","useState","text","sender","inputValue","setInputValue","chatEndRef","useRef","isFirstRender","handleSendMessage","async","trim","newMessages","aiResponse","message","interactionCount","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","json","content","error","console","fetchChatGptResponse","updatedMessages","errorMessage","updatedMessagesWithError","useEffect","current","scrollIntoView","behavior","block","_jsxs","className","id","children","_jsx","src","alt","width","href","onClick","e","element","document","getElementById","preventDefault","map","index","ref","type","placeholder","value","onChange","target","onKeyDown","key"],"sourceRoot":""}